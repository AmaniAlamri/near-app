{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","renderMap","url","index","window","document","getElementsByTagName","script","createElement","src","async","defer","parentNode","insertBefore","loadScript","initMap","getPlace","pos","that","assertThisInitialized","setState","places","category","getElementById","categoryVal","options","selectedIndex","value","navigator","geolocation","getCurrentPosition","position","lat","coords","latitude","lng","longitude","endPoint","concat","state","axios","get","then","response","data","results","length","swal","console","log","i","name","startMap","map","google","maps","Map","center","zoom","infoWindow","InfoWindow","_loop","marker","Marker","geometry","location","title","addListener","oepnNow","opening_hours","open_now","setContent","open","componentDidMount","react_default","a","className","id","Button","size","onClick","Component","Boolean","hostname","match","ReactDOM","render","src_App_0","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.dbe58790.chunk.js","sourcesContent":["/* eslint-disable no-loop-func */\nimport React, { Component } from \"react\";\nimport \"./App.css\";\nimport { Button } from \"reactstrap\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport axios from \"axios\";\nimport swal from 'sweetalert';\n\n//AIzaSyBJzCYpUwut6lwybLf5aJFccJJPXD8erC0 key\n\n\nclass App extends Component {\n\n  constructor() {\n    super();\n    this.state = {\n      lat: 0,\n      lng: 0,\n      places: [],\n      // placeInfo: [],\n      // type: \"\",\n      // allname: []\n    };\n  }\n\n  renderMap = () => {\n    loadScript(\n      //load the Maps JavaScript API\n      \"https://maps.googleapis.com/maps/api/js?key=AIzaSyBJzCYpUwut6lwybLf5aJFccJJPXD8erC0&callback=initMap\"\n    );\n    window.initMap = this.initMap;//callback initMap \n  };\n\n  \n  getPlace = () => {\n    var pos= {};//position \n    let that = this;\n\n    //to make sure there is no markers and places on the map\n    that.setState(() => ({\n      places:[]\n    }))\n\n    var category = document.getElementById(\"category\");\n\n    //get the type \"value\" of place\n    var categoryVal = category.options[category.selectedIndex].value;\n\n    //find current location of user based on latitude and longitude values\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(function(position) {\n        pos = {\n          lat: position.coords.latitude,\n          lng: position.coords.longitude\n        };\n\n      //add current location to state \n        that.setState(\n          {\n            lat: pos.lat,\n            lng: pos.lng\n          },\n        that.renderMap()//render the map after get lat and lng\n        );\n\n        //Display nearest place based on type\n        const endPoint = `https://cors-anywhere.herokuapp.com/https://maps.googleapis.com/maps/api/place/nearbysearch/json?location=${\n          that.state.lat\n        },${\n          that.state.lng\n        }&radius=1500&type=${categoryVal}&key=AIzaSyBJzCYpUwut6lwybLf5aJFccJJPXD8erC0`;\n\n        axios.get(endPoint).then(response => {\n\n          //display an alert in case of there is no near place\n          if (response.data.results.length===0){\n\n            swal(\"Sorry!!\", \"There is no place near to you!\");\n          }\n\n          else{\n          that.setState(\n            {\n              places: response.data.results\n            },\n            that.renderMap()//render the map after get places\n          );\n          console.log(that.state.places);\n\n          //iterate over all response data name\n          for (let i = 0; i < response.data.results.length; i++){\n            if (response.data.results[i].name !== \"undefined\") {\n\n              //add all names of places into array\n              //that.state.allname.push(response.data.results[i].name);\n\n            //  console.log(that.state.allname);\n              \n            //add the name of place to the name of state \n              that.setState({ name: response.data.results[0].name });\n\n            //  console.log(response.data.results[0].name);\n            //  console.log(that.state.placeInfo);\n            }//close if\n          }//close for\n          }//close else\n        });\n      });\n    }\n  };\n\n\n  startMap = () => {\n    var pos= {};//position \n    let that = this;\n\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(function(position) {\n        pos = {\n          lat: position.coords.latitude,\n          lng: position.coords.longitude\n        };\n      //add current location to state \n        that.setState(\n          {\n            lat: pos.lat,\n            lng: pos.lng\n          },\n        that.renderMap()//render the map after get lat and lng\n        );\n      });\n    }\n  };\n\n\n\n  // getAllPlace = () => {\n  //   const Place =\n  //     \"https://cors-anywhere.herokuapp.com/https://maps.googleapis.com/maps/api/js?key=AIzaSyBJzCYpUwut6lwybLf5aJFccJJPXD8erC0&libraries=geometry,places\";\n  //   axios.get(Place).then(response => {\n  //     console.log(response);\n  //   });\n  // };\n\n  initMap = () => {\n    let that = this;\n    const map = new window.google.maps.Map(document.getElementById(\"map\"), {\n      center: { lat: that.state.lat, lng: that.state.lng }, //Riyadh-Current Location\n      zoom: 11\n    });\n\n\n    //create info window\n    var infoWindow = new window.google.maps.InfoWindow();\n\n    for (let i = 0; i < that.state.places.length; i++) {\n      console.log(that.state.places[i].name);\n\n      //create a marker\n      var marker = new window.google.maps.Marker({\n        position: {\n          lat: this.state.places[i].geometry.location.lat,\n          lng: this.state.places[i].geometry.location.lng\n        },\n        map: map,\n        title: this.state.places[i].name\n      });\n\n      marker.addListener(\"click\", function() {\n\n        //empty string used to assign value of opening state\n        var oepnNow = \"\";\n\n        // var y = obj.hasOwnProperty(\"name\");\n        if (typeof that.state.places[i].opening_hours === \"undefined\") {\n          oepnNow = \"The business time is not specified\";\n        } else {\n          oepnNow = that.state.places[i].opening_hours.open_now ? \"Yes\" : \"No\";\n        }\n\n        infoWindow.setContent(\n          `<p> Name: ${that.state.places[i].name}</p>\\nOpen Now: ${oepnNow}`\n        );\n\n        //open info window\n        infoWindow.open(map, marker);\n      });\n    }\n\n    \n  }; //close initMap\n\n  //request:\n  // location , radius 50 000 m max-\n  //keyword type\n  //openNow true,false\n  //You must also pass a callback method to nearbySearch(),\n  // to handle the results object and google.maps.places.\n  //PlacesServiceStatus response.\n  // data then marker\n  // display = e => {\n  //   console.log(e.target.id);\n  //   //     this.setState({type:e.target.value})\n  //   // console.log(this.state.type)\n  //   console.log(\"display\");\n  //   const url =\n  //     \"https://cors-anywhere.herokuapp.com/https://maps.googleapis.com/maps/api/place/findplacefromtext/json?input=Museum%20of%20Contemporary%20Art%20Australia&inputtype=textquery&fields=photos,formatted_address,name,rating,opening_hours,geometry&key=AIzaSyBJzCYpUwut6lwybLf5aJFccJJPXD8erC0\";\n  //   axios\n  //     .get(url)\n  //     .then(response => {\n  //       console.log(response.data.candidates);\n  //     })\n  //     .catch(err => console.log(err));\n  //   var pos = {};\n  //   let that = this;\n  //   //find current location of user\n  //   if (navigator.geolocation) {\n  //     navigator.geolocation.getCurrentPosition(function(position) {\n  //       pos = {\n  //         lat: position.coords.latitude,\n  //         lng: position.coords.longitude\n  //       };\n  //       that.setState({\n  //         lat: pos.lat,\n  //         lng: pos.lng\n  //       });\n  //       //Display ATM type\n  //       const endPoint = `https://cors-anywhere.herokuapp.com/https://maps.googleapis.com/maps/api/place/nearbysearch/json?location=${\n  //         that.state.lat\n  //       },${\n  //         that.state.lng\n  //       }&radius=1500&type=atm&key=AIzaSyBJzCYpUwut6lwybLf5aJFccJJPXD8erC0`;\n  //       axios.get(endPoint).then(response => {\n  //         console.log(response);\n  //         // var allname = [];\n  //         // for (let i = 0; i < response.data.results.length; i++)\n  //         //   allname.push(response.data.results[i].name);\n  //         // console.log(allname);\n  //         that.setState({ name: response.data.results[0].name });\n  //         console.log(response.data.results[0].name);\n  //         console.log(that.state.placeInfo);\n  //       });\n  //     });\n  //   }\n  // }; //close display\n\n\n  componentDidMount = () => {\n    \n    this.startMap()\n    let that=this;\n    that.setState(() => ({\n      places:[]\n    }))\n    //this.renderMap()\n    // this.initMap();\n    // this.getPlace();\n  };\n\n\n  render() {\n    // console.log(this.state);\n\n    return (\n      <div className=\"\">\n        <main>\n          <div className=\"container\">\n            <div className=\"row App-div\">\n              <div className=\"col-4\">\n                <br />\n                <h4>Welcome to Near me App!!</h4>\n                <hr />\n                <div className=\"row App-div justify-content-center\">\n                  <p id=\"paragraph\">\n                    Please select the type of place that you're looking for:\n                  </p>\n                  <select id=\"category\">\n                    <option value=\"accounting\">Accounting</option>\n                    <option value=\"airport\">Airport</option>\n                    <option value=\"art_gallery\">Art Gallery</option>\n                    <option value=\"atm\">Atm</option>\n                    <option value=\"bakery\">Bakery</option>\n                    <option value=\"bank\">Bank</option>\n                    <option value=\"beauty_salon\">Beauty Salon</option>\n                    <option value=\"bicycle_store\">Bicycle Store</option>\n                    <option value=\"book_store\">Book Store</option>\n                    <option value=\"cafe\">Cafe</option>\n                    <option value=\"car_rental\">Car Rental</option>\n                    <option value=\"car_repair\">Car Repair</option>\n                    <option value=\"car_wash\">Car Wash</option>\n                    <option value=\"clothing_store\">Clothing Store</option>\n                    <option value=\"convenience_store\">Convenience Store</option>\n                    <option value=\"courthouse\">Courthouse</option>\n                    <option value=\"dentist\">Dentist</option>\n                    <option value=\"electronics_store\">Electronics Store</option>\n                    <option value=\"embassy\">Embassy</option>\n                    <option value=\"fire_station\">Fire Station</option>\n                    <option value=\"florist\">Florist</option>\n                    <option value=\"furniture_store\">Furniture Store</option>\n                    <option value=\"gas_station\">Gas Station</option>\n                    <option value=\"gym\">Gym</option>\n                    <option value=\"hair_care\">Hair Care</option>\n                    <option value=\"hospital\">Hospital</option>\n                    <option value=\"insurance_agency\">Insurance Agency</option>\n                    <option value=\"jewelry_store\">Jewelry Store</option>\n                    <option value=\"laundry\">Laundry</option>\n                    <option value=\"lawyer\">Lawyer</option>\n                    <option value=\"locksmith\">Locksmith</option>\n                    <option value=\"lodging\">Lodging</option>\n                    <option value=\"meal_delivery\">Meal Delivery</option>\n                    <option value=\"mosque\">Mosque</option>\n                    <option value=\"movie_theater\">Movie Theater</option>\n                    <option value=\"moving_company\">Moving Company</option>\n                    <option value=\"museum\">Museum</option>\n                    <option value=\"painter\">Painter</option>\n                    <option value=\"park\">Park</option>\n                    <option value=\"parking\">Parking</option>\n                    <option value=\"pet_store\">Pet Store</option>\n                    <option value=\"pharmacy\">Pharmacy</option>\n                    <option value=\"physiotherapist\">Physiotherapist</option>\n                    <option value=\"plumber\">Plumber</option>\n                    <option value=\"police\">Police</option>\n                    <option value=\"post_office\">Post Office</option>\n                    <option value=\"real_estate_agency\">\n                      Real Estate Agency</option>\n                    <option value=\"restaurant\">Restaurant</option>\n                    <option value=\"roofing_contractor\">Roofing Contractor</option>\n                    <option value=\"school\">School</option>\n                    <option value=\"shoe_store\">Shoe Store</option>\n                    <option value=\"shopping_mall\">Shopping Mall</option>\n                    <option value=\"spa\">Spa</option>\n                    <option value=\"stadium\">Stadium</option>\n                    <option value=\"store\">Store</option>\n                    <option value=\"supermarket\">Supermarket</option>\n                    <option value=\"train_station\">Train Station</option>\n                    <option value=\"restaurant\">Travel Agency</option>\n                    <option value=\"veterinary_care\">Veterinary Care</option>\n                    <option value=\"zoo\">Zoo</option>\n                  </select>\n\n                  <Button size=\"m\" onClick={this.getPlace}>\n                    Find Near Me!!\n                  </Button>\n\n                </div>\n              </div>\n\n              <div className=\"col-8\">\n                <div id=\"map\" />\n                              {/* Hold map */}\n              </div>\n            </div>\n            \n          </div>\n        </main>\n      </div>\n    );\n  }\n}\n\n/*\n\n  <script src=\"https://maps.googleapis.com/maps/api/js?key=AIzaSyBJzCYpUwut6lwybLf5aJFccJJPXD8erC0&callback=initMap\"\n    async defer></script>\n  </body>\n*/\n\nfunction loadScript(url) {\n  var index = window.document.getElementsByTagName(\"script\")[0];\n  var script = window.document.createElement(\"script\");\n  script.src = url;\n  script.async = true;\n  script.defer = true;\n  index.parentNode.insertBefore(script, index);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}